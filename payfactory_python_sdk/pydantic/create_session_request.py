# coding: utf-8

"""
    Payfactory Api

    Payfactory specializes in embedded payment facilitation (payfac) services for ISVs and SaaS companies. Our gateway-friendly platform integrates with software systems to provide seamless payment facilitation with little to no development required, allowing our partners to minimize integration costs and quickly gain a new revenue stream. Founded by payment industry veterans, we believe that integrated processing should be simple, frictionless and fast â€“ while also maintaining the highest level of security, customer service and human support.

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from payfactory_python_sdk.pydantic.create_session_request_signer_model import CreateSessionRequestSignerModel
from payfactory_python_sdk.pydantic.session_business_details_model import SessionBusinessDetailsModel

class CreateSessionRequest(BaseModel):
    signer: CreateSessionRequestSignerModel = Field(alias='signer')

    # Name of the merchant account
    company_name: str = Field(alias='companyName')

    # Url to redirect the merchant user to when clicking the back button
    redirect_url: str = Field(alias='redirectUrl')

    # Url to redirect the merchant user to upon completing the application
    complete_url: str = Field(alias='completeUrl')

    # Url to redirect to the merchant user to when their session is expired
    refresh_url: str = Field(alias='refreshUrl')

    # Unique identifier for the merchant in your system
    external_id: str = Field(alias='externalId')

    # Id of the Pricing Plan. Only used if enabled for the partner
    pricing_plan_id: typing.Optional[typing.Optional[str]] = Field(None, alias='pricingPlanId')

    business_details: typing.Optional[SessionBusinessDetailsModel] = Field(None, alias='businessDetails')
    class Config:
        arbitrary_types_allowed = True
