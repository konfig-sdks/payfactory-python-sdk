# coding: utf-8

"""
    Payfactory Api

    Payfactory specializes in embedded payment facilitation (payfac) services for ISVs and SaaS companies. Our gateway-friendly platform integrates with software systems to provide seamless payment facilitation with little to no development required, allowing our partners to minimize integration costs and quickly gain a new revenue stream. Founded by payment industry veterans, we believe that integrated processing should be simple, frictionless and fast â€“ while also maintaining the highest level of security, customer service and human support.

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from payfactory_python_sdk import schemas  # noqa: F401


class ApplicationStatus(
    schemas.EnumBase,
    schemas.StrSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        enum_value_to_name = {
            "Unknown": "UNKNOWN",
            "Submitted": "SUBMITTED",
            "Pending": "PENDING",
            "Underwriting": "UNDERWRITING",
            "Approved": "APPROVED",
            "Declinded": "DECLINDED",
            "Onboarded": "ONBOARDED",
        }
    
    @schemas.classproperty
    def UNKNOWN(cls):
        return cls("Unknown")
    
    @schemas.classproperty
    def SUBMITTED(cls):
        return cls("Submitted")
    
    @schemas.classproperty
    def PENDING(cls):
        return cls("Pending")
    
    @schemas.classproperty
    def UNDERWRITING(cls):
        return cls("Underwriting")
    
    @schemas.classproperty
    def APPROVED(cls):
        return cls("Approved")
    
    @schemas.classproperty
    def DECLINDED(cls):
        return cls("Declinded")
    
    @schemas.classproperty
    def ONBOARDED(cls):
        return cls("Onboarded")
