# coding: utf-8

"""
    Payfactory Api

    Payfactory specializes in embedded payment facilitation (payfac) services for ISVs and SaaS companies. Our gateway-friendly platform integrates with software systems to provide seamless payment facilitation with little to no development required, allowing our partners to minimize integration costs and quickly gain a new revenue stream. Founded by payment industry veterans, we believe that integrated processing should be simple, frictionless and fast â€“ while also maintaining the highest level of security, customer service and human support.

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from payfactory_python_sdk import schemas  # noqa: F401


class TransactionMetadataRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "cardHolderName",
            "merchantId",
            "transactionId",
        }
        
        class properties:
            
            
            class transactionId(
                schemas.StrSchema
            ):
                pass
            
            
            class merchantId(
                schemas.StrSchema
            ):
                pass
            
            
            class cardHolderName(
                schemas.StrSchema
            ):
                pass
            
            
            class externalId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'externalId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class orderId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'orderId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class partnerFee(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'partnerFee':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class itemCount(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'itemCount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "transactionId": transactionId,
                "merchantId": merchantId,
                "cardHolderName": cardHolderName,
                "externalId": externalId,
                "orderId": orderId,
                "partnerFee": partnerFee,
                "itemCount": itemCount,
            }
    
    cardHolderName: MetaOapg.properties.cardHolderName
    merchantId: MetaOapg.properties.merchantId
    transactionId: MetaOapg.properties.transactionId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionId"]) -> MetaOapg.properties.transactionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantId"]) -> MetaOapg.properties.merchantId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardHolderName"]) -> MetaOapg.properties.cardHolderName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalId"]) -> MetaOapg.properties.externalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderId"]) -> MetaOapg.properties.orderId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partnerFee"]) -> MetaOapg.properties.partnerFee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemCount"]) -> MetaOapg.properties.itemCount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["transactionId", "merchantId", "cardHolderName", "externalId", "orderId", "partnerFee", "itemCount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionId"]) -> MetaOapg.properties.transactionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantId"]) -> MetaOapg.properties.merchantId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardHolderName"]) -> MetaOapg.properties.cardHolderName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalId"]) -> typing.Union[MetaOapg.properties.externalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderId"]) -> typing.Union[MetaOapg.properties.orderId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partnerFee"]) -> typing.Union[MetaOapg.properties.partnerFee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemCount"]) -> typing.Union[MetaOapg.properties.itemCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transactionId", "merchantId", "cardHolderName", "externalId", "orderId", "partnerFee", "itemCount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cardHolderName: typing.Union[MetaOapg.properties.cardHolderName, str, ],
        merchantId: typing.Union[MetaOapg.properties.merchantId, str, ],
        transactionId: typing.Union[MetaOapg.properties.transactionId, str, ],
        externalId: typing.Union[MetaOapg.properties.externalId, None, str, schemas.Unset] = schemas.unset,
        orderId: typing.Union[MetaOapg.properties.orderId, None, str, schemas.Unset] = schemas.unset,
        partnerFee: typing.Union[MetaOapg.properties.partnerFee, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        itemCount: typing.Union[MetaOapg.properties.itemCount, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TransactionMetadataRequest':
        return super().__new__(
            cls,
            *args,
            cardHolderName=cardHolderName,
            merchantId=merchantId,
            transactionId=transactionId,
            externalId=externalId,
            orderId=orderId,
            partnerFee=partnerFee,
            itemCount=itemCount,
            _configuration=_configuration,
            **kwargs,
        )
