# coding: utf-8

"""
    Payfactory Api

    Payfactory specializes in embedded payment facilitation (payfac) services for ISVs and SaaS companies. Our gateway-friendly platform integrates with software systems to provide seamless payment facilitation with little to no development required, allowing our partners to minimize integration costs and quickly gain a new revenue stream. Founded by payment industry veterans, we believe that integrated processing should be simple, frictionless and fast â€“ while also maintaining the highest level of security, customer service and human support.

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from payfactory_python_sdk import schemas  # noqa: F401


class ApplicationSubmitRequestModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "bankDetails",
            "customerServiceContact",
            "riskContact",
            "processingDetails",
            "businessContact",
            "isvName",
            "pricingStructure",
            "businessDetails",
        }
        
        class properties:
            
            
            class isvName(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def businessDetails() -> typing.Type['BusinessDetailsModel']:
                return BusinessDetailsModel
        
            @staticmethod
            def customerServiceContact() -> typing.Type['CustomerServiceContactModel']:
                return CustomerServiceContactModel
        
            @staticmethod
            def riskContact() -> typing.Type['RiskContactModel']:
                return RiskContactModel
        
            @staticmethod
            def businessContact() -> typing.Type['PersonModel']:
                return PersonModel
        
            @staticmethod
            def processingDetails() -> typing.Type['ProcessingDetailsModel']:
                return ProcessingDetailsModel
        
            @staticmethod
            def bankDetails() -> typing.Type['BankDetailsModel']:
                return BankDetailsModel
        
            @staticmethod
            def pricingStructure() -> typing.Type['PricingModel']:
                return PricingModel
            
            
            class externalId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'externalId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class owners(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['OwnerModel']:
                        return OwnerModel
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'owners':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "isvName": isvName,
                "businessDetails": businessDetails,
                "customerServiceContact": customerServiceContact,
                "riskContact": riskContact,
                "businessContact": businessContact,
                "processingDetails": processingDetails,
                "bankDetails": bankDetails,
                "pricingStructure": pricingStructure,
                "externalId": externalId,
                "owners": owners,
            }
    
    bankDetails: 'BankDetailsModel'
    customerServiceContact: 'CustomerServiceContactModel'
    riskContact: 'RiskContactModel'
    processingDetails: 'ProcessingDetailsModel'
    businessContact: 'PersonModel'
    isvName: MetaOapg.properties.isvName
    pricingStructure: 'PricingModel'
    businessDetails: 'BusinessDetailsModel'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isvName"]) -> MetaOapg.properties.isvName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessDetails"]) -> 'BusinessDetailsModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerServiceContact"]) -> 'CustomerServiceContactModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["riskContact"]) -> 'RiskContactModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessContact"]) -> 'PersonModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processingDetails"]) -> 'ProcessingDetailsModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankDetails"]) -> 'BankDetailsModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pricingStructure"]) -> 'PricingModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalId"]) -> MetaOapg.properties.externalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owners"]) -> MetaOapg.properties.owners: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["isvName", "businessDetails", "customerServiceContact", "riskContact", "businessContact", "processingDetails", "bankDetails", "pricingStructure", "externalId", "owners", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isvName"]) -> MetaOapg.properties.isvName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessDetails"]) -> 'BusinessDetailsModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerServiceContact"]) -> 'CustomerServiceContactModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["riskContact"]) -> 'RiskContactModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessContact"]) -> 'PersonModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processingDetails"]) -> 'ProcessingDetailsModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankDetails"]) -> 'BankDetailsModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pricingStructure"]) -> 'PricingModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalId"]) -> typing.Union[MetaOapg.properties.externalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owners"]) -> typing.Union[MetaOapg.properties.owners, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["isvName", "businessDetails", "customerServiceContact", "riskContact", "businessContact", "processingDetails", "bankDetails", "pricingStructure", "externalId", "owners", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        bankDetails: 'BankDetailsModel',
        customerServiceContact: 'CustomerServiceContactModel',
        riskContact: 'RiskContactModel',
        processingDetails: 'ProcessingDetailsModel',
        businessContact: 'PersonModel',
        isvName: typing.Union[MetaOapg.properties.isvName, str, ],
        pricingStructure: 'PricingModel',
        businessDetails: 'BusinessDetailsModel',
        externalId: typing.Union[MetaOapg.properties.externalId, None, str, schemas.Unset] = schemas.unset,
        owners: typing.Union[MetaOapg.properties.owners, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApplicationSubmitRequestModel':
        return super().__new__(
            cls,
            *args,
            bankDetails=bankDetails,
            customerServiceContact=customerServiceContact,
            riskContact=riskContact,
            processingDetails=processingDetails,
            businessContact=businessContact,
            isvName=isvName,
            pricingStructure=pricingStructure,
            businessDetails=businessDetails,
            externalId=externalId,
            owners=owners,
            _configuration=_configuration,
            **kwargs,
        )

from payfactory_python_sdk.model.bank_details_model import BankDetailsModel
from payfactory_python_sdk.model.business_details_model import BusinessDetailsModel
from payfactory_python_sdk.model.customer_service_contact_model import CustomerServiceContactModel
from payfactory_python_sdk.model.owner_model import OwnerModel
from payfactory_python_sdk.model.person_model import PersonModel
from payfactory_python_sdk.model.pricing_model import PricingModel
from payfactory_python_sdk.model.processing_details_model import ProcessingDetailsModel
from payfactory_python_sdk.model.risk_contact_model import RiskContactModel
