# coding: utf-8

"""
    Payfactory Api

    Payfactory specializes in embedded payment facilitation (payfac) services for ISVs and SaaS companies. Our gateway-friendly platform integrates with software systems to provide seamless payment facilitation with little to no development required, allowing our partners to minimize integration costs and quickly gain a new revenue stream. Founded by payment industry veterans, we believe that integrated processing should be simple, frictionless and fast â€“ while also maintaining the highest level of security, customer service and human support.

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from payfactory_python_sdk import schemas  # noqa: F401


class ProcessingDetailsModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "billingDescriptor",
            "monthlyTransactionVolume",
            "cardPresentPerctange",
            "dailyTransactionCount",
            "highTransactionAmount",
            "cardNotPresentPerctange",
            "averageTransactionAmount",
            "lowTransactionAmount",
        }
        
        class properties:
            
            
            class billingDescriptor(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 21
                    min_length = 1
                    regex=[{
                        'pattern': r'^[^<>'" *]+$',
                    }]
            
            
            class monthlyTransactionVolume(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 999999999
                    inclusive_minimum = 1
            
            
            class lowTransactionAmount(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 999999999
                    inclusive_minimum = 1
            
            
            class averageTransactionAmount(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 999999999
                    inclusive_minimum = 1
            
            
            class highTransactionAmount(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 999999999
                    inclusive_minimum = 1
            
            
            class dailyTransactionCount(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 999999999
                    inclusive_minimum = 1
            
            
            class cardNotPresentPerctange(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 100
                    inclusive_minimum = 0
            
            
            class cardPresentPerctange(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 100
                    inclusive_minimum = 0
            __annotations__ = {
                "billingDescriptor": billingDescriptor,
                "monthlyTransactionVolume": monthlyTransactionVolume,
                "lowTransactionAmount": lowTransactionAmount,
                "averageTransactionAmount": averageTransactionAmount,
                "highTransactionAmount": highTransactionAmount,
                "dailyTransactionCount": dailyTransactionCount,
                "cardNotPresentPerctange": cardNotPresentPerctange,
                "cardPresentPerctange": cardPresentPerctange,
            }
    
    billingDescriptor: MetaOapg.properties.billingDescriptor
    monthlyTransactionVolume: MetaOapg.properties.monthlyTransactionVolume
    cardPresentPerctange: MetaOapg.properties.cardPresentPerctange
    dailyTransactionCount: MetaOapg.properties.dailyTransactionCount
    highTransactionAmount: MetaOapg.properties.highTransactionAmount
    cardNotPresentPerctange: MetaOapg.properties.cardNotPresentPerctange
    averageTransactionAmount: MetaOapg.properties.averageTransactionAmount
    lowTransactionAmount: MetaOapg.properties.lowTransactionAmount
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billingDescriptor"]) -> MetaOapg.properties.billingDescriptor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthlyTransactionVolume"]) -> MetaOapg.properties.monthlyTransactionVolume: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lowTransactionAmount"]) -> MetaOapg.properties.lowTransactionAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["averageTransactionAmount"]) -> MetaOapg.properties.averageTransactionAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["highTransactionAmount"]) -> MetaOapg.properties.highTransactionAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dailyTransactionCount"]) -> MetaOapg.properties.dailyTransactionCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardNotPresentPerctange"]) -> MetaOapg.properties.cardNotPresentPerctange: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardPresentPerctange"]) -> MetaOapg.properties.cardPresentPerctange: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["billingDescriptor", "monthlyTransactionVolume", "lowTransactionAmount", "averageTransactionAmount", "highTransactionAmount", "dailyTransactionCount", "cardNotPresentPerctange", "cardPresentPerctange", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billingDescriptor"]) -> MetaOapg.properties.billingDescriptor: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthlyTransactionVolume"]) -> MetaOapg.properties.monthlyTransactionVolume: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lowTransactionAmount"]) -> MetaOapg.properties.lowTransactionAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["averageTransactionAmount"]) -> MetaOapg.properties.averageTransactionAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["highTransactionAmount"]) -> MetaOapg.properties.highTransactionAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dailyTransactionCount"]) -> MetaOapg.properties.dailyTransactionCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardNotPresentPerctange"]) -> MetaOapg.properties.cardNotPresentPerctange: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardPresentPerctange"]) -> MetaOapg.properties.cardPresentPerctange: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["billingDescriptor", "monthlyTransactionVolume", "lowTransactionAmount", "averageTransactionAmount", "highTransactionAmount", "dailyTransactionCount", "cardNotPresentPerctange", "cardPresentPerctange", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        billingDescriptor: typing.Union[MetaOapg.properties.billingDescriptor, str, ],
        monthlyTransactionVolume: typing.Union[MetaOapg.properties.monthlyTransactionVolume, decimal.Decimal, int, ],
        cardPresentPerctange: typing.Union[MetaOapg.properties.cardPresentPerctange, decimal.Decimal, int, ],
        dailyTransactionCount: typing.Union[MetaOapg.properties.dailyTransactionCount, decimal.Decimal, int, ],
        highTransactionAmount: typing.Union[MetaOapg.properties.highTransactionAmount, decimal.Decimal, int, ],
        cardNotPresentPerctange: typing.Union[MetaOapg.properties.cardNotPresentPerctange, decimal.Decimal, int, ],
        averageTransactionAmount: typing.Union[MetaOapg.properties.averageTransactionAmount, decimal.Decimal, int, ],
        lowTransactionAmount: typing.Union[MetaOapg.properties.lowTransactionAmount, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProcessingDetailsModel':
        return super().__new__(
            cls,
            *args,
            billingDescriptor=billingDescriptor,
            monthlyTransactionVolume=monthlyTransactionVolume,
            cardPresentPerctange=cardPresentPerctange,
            dailyTransactionCount=dailyTransactionCount,
            highTransactionAmount=highTransactionAmount,
            cardNotPresentPerctange=cardNotPresentPerctange,
            averageTransactionAmount=averageTransactionAmount,
            lowTransactionAmount=lowTransactionAmount,
            _configuration=_configuration,
            **kwargs,
        )
