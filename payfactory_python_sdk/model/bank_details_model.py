# coding: utf-8

"""
    Payfactory Api

    Payfactory specializes in embedded payment facilitation (payfac) services for ISVs and SaaS companies. Our gateway-friendly platform integrates with software systems to provide seamless payment facilitation with little to no development required, allowing our partners to minimize integration costs and quickly gain a new revenue stream. Founded by payment industry veterans, we believe that integrated processing should be simple, frictionless and fast â€“ while also maintaining the highest level of security, customer service and human support.

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from payfactory_python_sdk import schemas  # noqa: F401


class BankDetailsModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "routingNumber",
            "accountNumber",
        }
        
        class properties:
            
            
            class routingNumber(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 9
                    min_length = 1
                    regex=[{
                        'pattern': r'^[0-9]{9}',
                    }]
            
            
            class accountNumber(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'password'
                    max_length = 30
                    min_length = 3
                    regex=[{
                        'pattern': r'^[0-9]{3,30}',
                    }]
            __annotations__ = {
                "routingNumber": routingNumber,
                "accountNumber": accountNumber,
            }
    
    routingNumber: MetaOapg.properties.routingNumber
    accountNumber: MetaOapg.properties.accountNumber
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["routingNumber"]) -> MetaOapg.properties.routingNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountNumber"]) -> MetaOapg.properties.accountNumber: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["routingNumber", "accountNumber", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["routingNumber"]) -> MetaOapg.properties.routingNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountNumber"]) -> MetaOapg.properties.accountNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["routingNumber", "accountNumber", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        routingNumber: typing.Union[MetaOapg.properties.routingNumber, str, ],
        accountNumber: typing.Union[MetaOapg.properties.accountNumber, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BankDetailsModel':
        return super().__new__(
            cls,
            *args,
            routingNumber=routingNumber,
            accountNumber=accountNumber,
            _configuration=_configuration,
            **kwargs,
        )
