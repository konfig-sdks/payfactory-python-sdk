# coding: utf-8

"""
    Payfactory Api

    Payfactory specializes in embedded payment facilitation (payfac) services for ISVs and SaaS companies. Our gateway-friendly platform integrates with software systems to provide seamless payment facilitation with little to no development required, allowing our partners to minimize integration costs and quickly gain a new revenue stream. Founded by payment industry veterans, we believe that integrated processing should be simple, frictionless and fast â€“ while also maintaining the highest level of security, customer service and human support.

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from payfactory_python_sdk import schemas  # noqa: F401


class PricingModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "discover",
            "amex",
            "monthlyFee",
            "visaMasterCard",
        }
        
        class properties:
        
            @staticmethod
            def amex() -> typing.Type['PricingModelPricingStructureCardModel']:
                return PricingModelPricingStructureCardModel
        
            @staticmethod
            def visaMasterCard() -> typing.Type['PricingModelPricingStructureCardModel']:
                return PricingModelPricingStructureCardModel
        
            @staticmethod
            def discover() -> typing.Type['PricingModelPricingStructureCardModel']:
                return PricingModelPricingStructureCardModel
            
            
            class monthlyFee(
                schemas.Float64Schema
            ):
                pass
        
            @staticmethod
            def billingFrequency() -> typing.Type['PricingModelBillingFrequencyEnum']:
                return PricingModelBillingFrequencyEnum
        
            @staticmethod
            def program() -> typing.Type['PricingProgramEnum']:
                return PricingProgramEnum
            __annotations__ = {
                "amex": amex,
                "visaMasterCard": visaMasterCard,
                "discover": discover,
                "monthlyFee": monthlyFee,
                "billingFrequency": billingFrequency,
                "program": program,
            }
    
    discover: 'PricingModelPricingStructureCardModel'
    amex: 'PricingModelPricingStructureCardModel'
    monthlyFee: MetaOapg.properties.monthlyFee
    visaMasterCard: 'PricingModelPricingStructureCardModel'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amex"]) -> 'PricingModelPricingStructureCardModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visaMasterCard"]) -> 'PricingModelPricingStructureCardModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["discover"]) -> 'PricingModelPricingStructureCardModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthlyFee"]) -> MetaOapg.properties.monthlyFee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billingFrequency"]) -> 'PricingModelBillingFrequencyEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["program"]) -> 'PricingProgramEnum': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amex", "visaMasterCard", "discover", "monthlyFee", "billingFrequency", "program", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amex"]) -> 'PricingModelPricingStructureCardModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visaMasterCard"]) -> 'PricingModelPricingStructureCardModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["discover"]) -> 'PricingModelPricingStructureCardModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthlyFee"]) -> MetaOapg.properties.monthlyFee: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billingFrequency"]) -> typing.Union['PricingModelBillingFrequencyEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["program"]) -> typing.Union['PricingProgramEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amex", "visaMasterCard", "discover", "monthlyFee", "billingFrequency", "program", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        discover: 'PricingModelPricingStructureCardModel',
        amex: 'PricingModelPricingStructureCardModel',
        monthlyFee: typing.Union[MetaOapg.properties.monthlyFee, decimal.Decimal, int, float, ],
        visaMasterCard: 'PricingModelPricingStructureCardModel',
        billingFrequency: typing.Union['PricingModelBillingFrequencyEnum', schemas.Unset] = schemas.unset,
        program: typing.Union['PricingProgramEnum', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PricingModel':
        return super().__new__(
            cls,
            *args,
            discover=discover,
            amex=amex,
            monthlyFee=monthlyFee,
            visaMasterCard=visaMasterCard,
            billingFrequency=billingFrequency,
            program=program,
            _configuration=_configuration,
            **kwargs,
        )

from payfactory_python_sdk.model.pricing_model_billing_frequency_enum import PricingModelBillingFrequencyEnum
from payfactory_python_sdk.model.pricing_model_pricing_structure_card_model import PricingModelPricingStructureCardModel
from payfactory_python_sdk.model.pricing_program_enum import PricingProgramEnum
